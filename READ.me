УСТНЫЕ ВОПРОСЫ

#1 Какой самый эффективный способ конкатенации строк?

В Go самый эффективный способ конкатенации строк — это использование пакета strings и функции Join. 
Особенно это актуально, когда у нас много строк для конкатенации.
Выбор метода зависит от конкретной ситуации. Если у нас множество строк, которые нужно объединить, 
и они уже находятся в слайсе, то strings.Join - самое быстрое решение. 
Если нужно постоянно добавлять новые части к строке, 
то strings.Builder или bytes.Buffer более подходящий выбор.

#2 Что такое интерфейсы, как они применяются в Go?

Интерфейсы в Go — это способ определения договоров (контрактов) о том, какие методы должен иметь тип. 
Они не определяют поведение (реализацию) этих методов, а лишь их сигнатуры.
Основные особенности интерфейсов в Go:
Декларативность: Интерфейс определяется набором методов. Если тип реализует все методы интерфейса, 
он автоматически считается реализующим этот интерфейс, без явного указания (как, например, в Java).
Полиморфизм: Интерфейсы позволяют писать функции и методы, которые могут работать с различными типами данных, 
при условии, что эти типы реализуют определенные интерфейсы.
Гибкость: В Go часто используется принцип "принимай интерфейсы, возвращай структуры", что делает код гибким и легко тестируемым.

#3 Чем отличаются RWMutex от Mutex?

Mutex и RWMutex оба служат для обеспечения многопоточной безопасности в Go:
Mutex обеспечивает исключительную блокировку: одновременно только одна горутина может владеть блокировкой.
RWMutex 1. позволяет множеству горутин одновременно держать "читающую" блокировку. 
        2. Записывающая блокировка исключает другие блокировки (читающие или записывающие).
Использовать Mutex лучше для простых сценариев, а RWMutex - когда операции чтения значительно чаще операций записи.

#4 Чем отличаются буферизированные и не буферизированные каналы?

Не буферизированные:
-Блокируют отправку до тех пор, пока другая горутина не прочитает значение.
-Используются для синхронизации горутин.
Буферизированные:
-Имеют буфер. Отправка и чтение блокируются только при полном или пустом буфере.
-Позволяют горутинам работать асинхронно до определенного предела.

#5 Какой размер у структуры struct{}{}?

Размер структуры struct{}{} в Go равен 0 байт. 
Это пустая структура, которая не содержит никаких полей, и поэтому не занимает места в памяти. 
Несмотря на это, разные экземпляры такой структуры являются уникальными адресами в памяти.

#6 Есть ли в Go перегрузка методов или операторов?

В Go нет перегрузки методов или операторов. 
Это значит, что мы не можем определить два метода с одинаковым именем для одного и того же типа, 
даже если у них разные сигнатуры (набор параметров). 
Также мы не можем изменить поведение стандартных операторов для наших типов.

#7  В какой последовательности будут выведены элементы map[int]int? Пример: m[0]=1 m[1]=124 m[2]=281

В Go, map не гарантирует сохранение порядка элементов. 
Это значит, что при каждом переборе элементов map с помощью цикла range, порядок элементов может изменяться.

#8 В чем разница make и new?

new:
   - Аллоцирует память.
   - Возвращает указатель на нулевое значение типа.
make:
   - Инициализирует слайсы, карты, каналы.
   - Возвращает инициализированный экземпляр, а не указатель.

#9 Сколько существует способов задать переменную типа slice или map?

для каждого из типов (slice и map) существует три основных способа задать переменную:
slice:
1. Объявление без инициализации:
var s []int

2. Используя make:
s := make([]int, 5)  // длина 5, емкость 5
s := make([]int, 5, 10) // длина 5, емкость 10

3. Литерал слайса:
s := []int{1, 2, 3, 4, 5}

map:
1. Объявление без инициализации:
var m map[string]int

2. Используя make:
m := make(map[string]int)

3. Литерал карты:
m := map[string]int{"one": 1, "two": 2}

#10 Что выведет данная программа и почему?
func update(p *int) {
  b := 2
  p = &b
}
func main() {
  var (
     a = 1
     p = &a
  )
  fmt.Println(*p)
  update(p)
  fmt.Println(*p)
}

В main() объявляется переменная a со значением 1.
Затем объявляется указатель p, который указывает на переменную a.
При первом вызове fmt.Println(*p) будет выведено значение, на которое указывает p, т.е. 1.
Затем вызывается функция update(p), внутри которой создается новая локальная переменная b со значением 2.
Внутри функции update указателю p присваивается адрес переменной b. 
Однако это изменение локальное для функции update и не влияет на указатель p в функции main().
При втором вызове fmt.Println(*p) снова будет выведено значение 1, 
потому что указатель p в функции main() все еще указывает на переменную a.
Причина такого поведения заключается в том, что указатель передается в функцию по значению, 
и изменение указателя внутри функции не влияет на исходный указатель в вызывающей функции.

#11 Что выведет данная программа и почему?
func main() {
  wg := sync.WaitGroup{}
  for i := 0; i < 5; i++ {
     wg.Add(1)
     go func(wg sync.WaitGroup, i int) {
        fmt.Println(i)
        wg.Done()
     }(wg, i)
  }
  wg.Wait()
  fmt.Println("exit")
}

Данная программа использует пакет sync для синхронизации горутин с помощью WaitGroup.
В цикле создаются 5 горутин, каждая из которых выводит значение i и сигнализирует WaitGroup о своем завершении.
Однако есть одна особенность: sync.WaitGroup передается в горутину как параметр по значению. 
Это означает, что каждая горутина получает свою копию WaitGroup, а не ссылку на исходную WaitGroup.
В результате метод Done() уменьшает счетчик для копии WaitGroup, а не для исходной WaitGroup в main(). Это приводит к тому, 
что исходный WaitGroup никогда не достигнет счетчика 0, и метод Wait() будет ждать вечно.
Тем не менее, перед зависанием Wait(), мы увидим пять чисел (от 0 до 4) в произвольном порядке, 
потому что горутины будут выполняться в конкурентной среде.
После этого программа зависнет и не выведет "exit".
Чтобы исправить, нужно передать указатель *sync.WaitGroup вместо sync.WaitGroup в аргументах горутины.

#12 Что выведет данная программа и почему?
func main() {
  n := 0
  if true {
     n := 1
     n++
  }
  fmt.Println(n)
}

Ответ: программа выведет 0.
Данная программа создает переменную n в двух разных областях видимости.
В функции main(), n инициализируется значением 0.
Внутри блока if, объявляется новая локальная переменная n со значением 1, которая затем увеличивается на 1.
Эта локальная переменная n внутри блока if "заслоняет" переменную n из main(). Однако после выхода из блока if, 
локальная переменная n исчезает, и мы снова видим исходную переменную n из main().
Таким образом, когда мы вызываем fmt.Println(n) в конце функции main(), выводится значение исходной переменной n, которое равно 0.

#13 Что выведет данная программа и почему?
func someAction(v []int8, b int8) {
  v[0] = 100
  v = append(v, b)
}
func main() {
  var a = []int8{1, 2, 3, 4, 5}
  someAction(a, 6)
  fmt.Println(a)
}

Слайс a будет изменен только в первом элементе, 
поскольку добавление элемента с помощью append создаёт новый слайс. Таким образом, вывод будет:
[100 2 3 4 5]

#14 Что выведет данная программа и почему?
func main() {
  slice := []string{"a", "a"}

  func(slice []string) {
     slice = append(slice, "a")
     slice[0] = "b"
     slice[1] = "b"
     fmt.Print(slice)
  }(slice)
  fmt.Print(slice)
}

Программа выведет: [b b a][a a]
Начинается с создания слайса slice с двумя строками "a".
Затем вызывается анонимная функция, которой передаётся слайс slice.
Внутри анонимной функции к слайсу slice добавляется ещё одна строка "a" с помощью append. 
Но так как начальная вместимость слайса (по умолчанию равна его длине, т.е. 2) не позволяет добавить третий элемент, 
append создаёт новый внутренний массив. 
Таким образом, локальный слайс внутри функции теперь указывает на другой внутренний массив, 
в отличие от исходного слайса slice в main.
Далее, внутри анонимной функции, мы меняем первые два элемента слайса на "b" и выводим его с помощью fmt.Print. 
На этом этапе слайс внутри функции будет равен ["b", "b", "a"].
После завершения анонимной функции, в main выводится исходный слайс slice, который остался неизменным и равен ["a", "a"].
